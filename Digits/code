 # net.exp_function(np.array([0.18, 1], dtype='float64'), np.array([1, 0, 0, 0], dtype='float64'))
    # net.print_gradients()

    # net.load_weights(r"C:\Users\User\Desktop\Neural Network\Neural Network v4\digit 97% - 99.35%")
    #
    # t_img, t_info = np.load('Digits\\t_img.npy'), np.load('Digits\\t_info.npy')
    # t_img.shape = (len(t_img), 784)
    # t_img = t_img / 255
    #
    # print("Begin")
    #
    # bad_answers = []
    # rights = 0
    # for i in range(len(t_img)):
    #     data = Network.argmax(net.forward_propagation(t_img[i]))
    #
    #     if data[t_info[i]] == 1:
    #         rights += 1
    #     else:
    #         bad_answers.append(t_img[i])
    #
    # print("Correct: {}%".format(rights / 100))
    #
    # bad_answers = np.array(bad_answers)
    # bad_answers.shape = (len(bad_answers), 28, 28)
    # rng = 100 if len(bad_answers) > 100 else len(bad_answers)
    # for i in range(rng):
    #     plt.subplot(10, 10, i + 1)
    #     plt.xticks([])
    #     plt.yticks([])
    #     plt.imshow(bad_answers[i], cmap=plt.cm.binary)
    #
    # plt.show()
    #
    # # net.save_weights("Example")
    #
    # # net.print_network_info()
